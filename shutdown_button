#!/usr/bin/env python3
"""
Perform RaspberryPi shutdown when a hardware button is pressed and
held for sufficient time.
"""

__version__ = "1.0"
__author__ = "Alexander L. Belikoff"
__email__ = "abelikoff@gmail.com"
__copyright__ = "Copyright 2018, Alexander L. Belikoff"
__license__ = "GPLv3"


import argparse
import logging
import os
import sys
from gpiozero import Button
from signal import pause


def shutdown(dry_run):
    logging.info("Button held for sufficient time - about to shut down")

    if dry_run:
        logging.warn("Simulating shutdown")
    else:
        os.system("sudo poweroff")


def main(args):
    btn = Button(args.pin, hold_time=args.hold_time)
    btn.when_held = lambda: shutdown(args.dry_run)
    pause()


def _parse_args():
    "Parse command line args."

    parser = argparse.ArgumentParser(description=globals()["__doc__"],
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--pin", type=int,
                        dest="pin", default=25,
                        help="GPIO pin the button is connected to.")
    parser.add_argument("-t", "--hold-time", type=int,
                        dest="hold_time", default=5,
                        help="Time the button should be pressed (seconds).")
    parser.add_argument("-n", "--dry-run", action="store_true",
                        dest="dry_run", default=False,
                        help="Dry run mode")
    parser.add_argument("-v", "--verbose", action="store_true",
                        dest="verbose_mode", default=False,
                        help="verbose mode")
    parser.add_argument("--version", action="version",
                        version="%(prog)s {version}".format(version=
                                                            __version__))
    parser.add_argument("args", type=str, nargs="*",
                        help="Arguments to the program")
    return parser.parse_args()


if __name__ == "__main__":
    OPTIONS = _parse_args()

    if OPTIONS.verbose_mode:
        logging.basicConfig(level=logging.INFO,
                            format="%(levelname)s: %(message)s")
    else:
        logging.basicConfig(format="%(levelname)s: %(message)s")

    try:
        main(OPTIONS)
        sys.exit(0)

    except KeyboardInterrupt as exc: # Ctrl-C
        raise exc


# Local Variables:
# compile-command: "pylint -r n shutdown_button"
# end:
